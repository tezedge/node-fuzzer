{
  "paths": {
    "/openapi/tezedge-openapi.json": {
      "get": { }
    },

    "/dev/chains/main/actions/blocks/{block_hash}": {
      "get": { 
          "parameters": [
              {
                "name": "block_hash",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
              },
              {
                "name": "cursor_id",
                "in": "query",
                "required": true,
                "schema": { "type": "integer" }
              },
              {
                "name": "limit",
                "in": "query",
                "required": true,
                "schema": { "type": "integer" }
              },
              {
                "name": "action_types",
                "in": "query",
                "required": true,
                "schema": { "type": "string" }
              }
          ]            
      }
    },
    "/dev/chains/main/actions/blocks/{block_hash}/details": {
      "get": { 
          "parameters": [
              {
                "name": "block_hash",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
              }
          ]            
      }
    },
    "/dev/chains/main/actions/contracts/{contract_address}": {
      "get": { 
          "parameters": [
              {
                "name": "contract_address",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
              },
              {
                "name": "cursor_id",
                "in": "query",
                "required": true,
                "schema": { "type": "integer" }
              },
              {
                "name": "limit",
                "in": "query",
                "required": true,
                "schema": { "type": "integer" }
              },
              {
                "name": "action_types",
                "in": "query",
                "required": true,
                "schema": { "type": "string" }
              }
          ]            
      }
    },
    "/stats/memory/protocol_runners": {
      "get": { }
    },
    "/stats/context": {
      "get": {
        "parameters": [
          {
            "name": "context_name",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/stats/{chain_id}/blocks/{block_id}": {
      "get": {
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/dev/chains/{chain_id}/blocks/{block_id}/cycle_eras": {
      "get": {
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/chains/{chain_id}": {
      "patch": {
        "tags": [
          "chains"
        ],
        "description": "Forcefully set the bootstrapped flag of the node",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bootstrapped": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "bootstrapped"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks": {
      "get": {
        "tags": [
          "chains"
        ],
        "description": "Lists block hashes from '<chain>', up to the last checkpoint, sorted with decreasing fitness. Without arguments it returns the head of the chain. Optional arguments allow to return the list of predecessors of a given block or of a set of blocks.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "The requested number of predecessors to return (per request; see next argument).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "head",
            "in": "query",
            "description": "block_hash (Base58Check-encoded) An empty argument requests blocks starting with the current head. A non empty list allows to request one or more specific fragments of the chain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_date",
            "in": "query",
            "description": "A date in seconds from epoch When `min_date` is provided, blocks with a timestamp before `min_date` are filtered out",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/block_hash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockInfo"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/header": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_header"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/live_blocks": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/protocols": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "type": "string"
                    },
                    "next_protocol": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/hash": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/metadata_hash": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operations_metadata_hash": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operation_metadata_hashes": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operation_metadata_hashes/{validation_pass_index}": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validation_pass_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operation_metadata_hashes/{validation_pass_index}/{operation_index}": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validation_pass_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "operation_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/header/shell": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operation_hashes": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operations": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks/{block_id}/operations/{validation_pass_index}/{operation_index}": {
      "get": {
        "tags": [
          "chains"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validation_pass_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "operation_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/chain_id": {
      "get": {
        "tags": [
          "chains"
        ],
        "description": "The chain unique identifier.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chain_id"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/checkpoint": {
      "get": {
        "tags": [
          "chains"
        ],
        "description": "The current checkpoint for this chain.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "$ref": "#/components/schemas/block_header"
                    },
                    "save_point": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "caboose": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "history_mode": {
                      "type": "string",
                      "enum": [
                        "full",
                        "archive",
                        "rolling"
                      ]
                    }
                  },
                  "required": [
                    "block",
                    "save_point",
                    "caboose",
                    "history_mode"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/mempool/pending_operations": {
      "get": {
        "tags": [
          "mempool"
        ],
        "description": "",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "applied": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "refused": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "branch_refused": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "branch_delayed": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "unprocessed": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/mempool/monitor_operations": {
      "get": {
        "tags": [
          "mempool"
        ],
        "description": "",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applied",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch_refused",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch_delayed",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refused",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/dev/chains/main/blocks": {
      "get": {
        "tags": [
          "dev"
        ],
        "description": "",
        "parameters": [
          {
            "name": "from_block_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "integer"
                      },
                      "block_hash": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "cycle_position": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/dev/version": {
      "get": {
        "tags": [
          "dev"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/invalid_blocks": {
      "get": {
        "tags": [
          "chains"
        ],
        "description": "Lists blocks that have been declared invalid along with the errors that led to them being declared invalid.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "block": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "level": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "errors": {
                        "$ref": "#/components/schemas/error"
                      }
                    },
                    "required": [
                      "block",
                      "level",
                      "errors"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/invalid_blocks/{block_hash}": {
      "get": {
        "tags": [
          "chains"
        ],
        "description": "The errors that appears during the block (in)validation.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_hash",
            "in": "path",
            "description": "block_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "errors": {
                      "$ref": "#/components/schemas/error"
                    }
                  },
                  "required": [
                    "block",
                    "level",
                    "errors"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chains"
        ],
        "description": "Remove an invalid block for the tezos storage",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_hash",
            "in": "path",
            "description": "block_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/is_bootstrapped": {
      "get": {
        "tags": [
          "chains"
        ],
        "description": "The bootstrap status of a chain",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bootstrapped": {
                      "type": "boolean"
                    },
                    "sync_state": {
                      "$ref": "#/components/schemas/chain_status"
                    }
                  },
                  "required": [
                    "bootstrapped",
                    "sync_state"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": [
          "config"
        ],
        "description": "Return the runtime node configuration (this takes into account the command-line arguments and the on-disk configuration file)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data-dir": {
                      "description": "Location of the data dir on disk.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/unistring"
                        }
                      ]
                    },
                    "disable-config-validation": {
                      "description": "Disable the node configuration validation.",
                      "type": "boolean"
                    },
                    "rpc": {
                      "description": "Configuration of rpc parameters",
                      "type": "object",
                      "properties": {
                        "listen-addrs": {
                          "description": "Hosts to listen to. If the port is not specified, the default port 8732 will be assumed.",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/unistring"
                          }
                        },
                        "listen-addr": {
                          "description": "Legacy value: Host to listen to",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        },
                        "cors-origin": {
                          "description": "Cross Origin Resource Sharing parameters, see https://en.wikipedia.org/wiki/Cross-origin_resource_sharing.",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/unistring"
                          }
                        },
                        "cors-headers": {
                          "description": "Cross Origin Resource Sharing parameters, see https://en.wikipedia.org/wiki/Cross-origin_resource_sharing.",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/unistring"
                          }
                        },
                        "crt": {
                          "description": "Certificate file (necessary when TLS is used).",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        },
                        "key": {
                          "description": "Key file (necessary when TLS is used).",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        }
                      }
                    },
                    "p2p": {
                      "description": "Configuration of network parameters",
                      "type": "object",
                      "properties": {
                        "expected-proof-of-work": {
                          "description": "Floating point number between 0 and 256 that represents a difficulty, 24 signifies for example that at least 24 leading zeroes are expected in the hash.",
                          "type": "integer"
                        },
                        "bootstrap-peers": {
                          "description": "List of hosts. Tezos can connect to both IPv6 and IPv4 hosts. If the port is not specified, default port 9732 will be assumed.",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/unistring"
                          }
                        },
                        "listen-addr": {
                          "description": "Host to listen to. If the port is not specified, the default port 8732 will be assumed.",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        },
                        "discovery-addr": {
                          "description": "Host for local peer discovery. If the port is not specified, the default port 10732 will be assumed.",
                          "nullable": true,
                          "oneOf": [
                            {
                              "title": "Some",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/unistring"
                                }
                              ]
                            }
                          ]
                        },
                        "private-mode": {
                          "description": "Specify if the node is in private mode or not. A node in private mode rejects incoming connections from untrusted peers and only opens outgoing connections to peers listed in 'bootstrap-peers' or provided with '--peer' option. Moreover, these peers will keep the identity and the address of the private node secret.",
                          "type": "boolean"
                        },
                        "limits": {
                          "description": "Network limits",
                          "type": "object",
                          "properties": {
                            "connection-timeout": {
                              "description": "Delay acceptable when initiating a connection to a new peer, in seconds.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            },
                            "authentication-timeout": {
                              "description": "Delay granted to a peer to perform authentication, in seconds.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            },
                            "min-connections": {
                              "description": "Strict minimum number of connections (triggers an urgent maintenance).",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "expected-connections": {
                              "description": "Targeted number of connections to reach when bootstrapping / maintaining.",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "max-connections": {
                              "description": "Maximum number of connections (exceeding peers are disconnected).",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "backlog": {
                              "description": "Number above which pending incoming connections are immediately rejected.",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 255
                            },
                            "max-incoming-connections": {
                              "description": "Number above which pending incoming connections are immediately rejected.",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 255
                            },
                            "max-download-speed": {
                              "description": "Max download speeds in KiB/s.",
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "max-upload-speed": {
                              "description": "Max upload speeds in KiB/s.",
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "swap-linger": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "binary-chunks-size": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 255
                            },
                            "read-buffer-size": {
                              "description": "Size of the buffer passed to read(2).",
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "read-queue-size": {
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "write-queue-size": {
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "incoming-app-message-queue-size": {
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "incoming-message-queue-size": {
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "outgoing-message-queue-size": {
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "max_known_points": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 65535
                                  },
                                  {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 65535
                                  }
                                ]
                              }
                            },
                            "max_known_peer_ids": {
                              "description": "The max and target size for the known address table.",
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 65535
                                  },
                                  {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 65535
                                  }
                                ]
                              }
                            },
                            "peer_greylist_size": {
                              "description": "The number of peer_ids kept in the peer_id greylist.",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "ip_greylist_size_in_kilobytes": {
                              "description": "The size of the IP address greylist (in kilobytes).",
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "ip_greylist_cleanup_delay": {
                              "description": "The time an IP address is kept in the greylist.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            },
                            "greylist-timeout": {
                              "description": "GC delay for the greylists tables, in seconds.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            },
                            "maintenance-idle-time": {
                              "description": "How long to wait at most, in seconds, before running a maintenance loop.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            }
                          }
                        },
                        "disable_mempool": {
                          "description": "If set to [true], the node will not participate in the propagation of pending operations (mempool). Default value is [false]. It can be used to decrease the memory and computation footprints of the node.",
                          "type": "boolean"
                        },
                        "enable_testchain": {
                          "description": "If set to [true], the node will spawn a testchain during the protocol's testing voting period. Default value is [false]. It is disabled to decrease the node storage usage and computation by dropping the validation of the test network blocks.",
                          "type": "boolean"
                        },
                        "greylisting_config": {
                          "description": "The reconnection policy regulates the frequency with which the node tries to reconnect to an old known peer.",
                          "type": "object",
                          "properties": {
                            "factor": {
                              "description": "The factor by which the reconnection delay is increased when a peer that was previously disconnected is disconnected again. This value should be set to 1 for a linear back-off and to >1 for an exponential back-off.",
                              "type": "integer"
                            },
                            "initial-delay": {
                              "description": "The span of time a peer is disconnected for when it is first disconnected.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            },
                            "disconnection-delay": {
                              "description": "The span of time a peer is disconnected for when it is disconnected as the result of an error.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            },
                            "increase-cap": {
                              "description": "The maximum amount by which the reconnection is extended. This limits the rate of the exponential back-off, which eventually becomes linear when it reaches this limit. This limit is set to avoid reaching the End-of-Time when repeatedly reconnection a peer.",
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/timespan.system"
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    "log": {
                      "description": "Configuration of the Lwt-log sink (part of the logging framework)",
                      "type": "object",
                      "properties": {
                        "output": {
                          "description": "Output for the logging function. Either 'stdout', 'stderr' or the name of a log file .",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        },
                        "level": {
                          "description": "Verbosity level: one of 'fatal', 'error', 'warn','notice', 'info', 'debug'.",
                          "type": "string",
                          "enum": [
                            "info",
                            "debug",
                            "error",
                            "fatal",
                            "warning",
                            "notice"
                          ]
                        },
                        "rules": {
                          "description": "Fine-grained logging instructions. Same format as described in `tezos-node run --help`, DEBUG section. In the example below, sections 'p2p' and all sections starting by 'client' will have their messages logged up to the debug level, whereas the rest of log sections will be logged up to the notice level.",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        },
                        "template": {
                          "description": "Format for the log file, see http://ocsigen.org/lwt/dev/api/Lwt_log_core#2_Logtemplates.",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/unistring"
                            }
                          ]
                        }
                      }
                    },
                    "internal-events": {
                      "description": "Configuration of the structured logging framework",
                      "type": "object",
                      "properties": {
                        "activate": {
                          "description": "List of URIs to activate/configure sinks.",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/unistring"
                          }
                        }
                      }
                    },
                    "shell": {
                      "description": "Configuration of network parameters",
                      "type": "object",
                      "properties": {
                        "peer_validator": {
                          "type": "object",
                          "properties": {
                            "block_header_request_timeout": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "block_operations_request_timeout": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "protocol_request_timeout": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "new_head_request_timeout": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "worker_backlog_size": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "worker_backlog_level": {
                              "type": "string",
                              "enum": [
                                "info",
                                "debug",
                                "error",
                                "fatal",
                                "warning",
                                "notice"
                              ]
                            }
                          }
                        },
                        "block_validator": {
                          "type": "object",
                          "properties": {
                            "protocol_request_timeout": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "worker_backlog_size": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "worker_backlog_level": {
                              "type": "string",
                              "enum": [
                                "info",
                                "debug",
                                "error",
                                "fatal",
                                "warning",
                                "notice"
                              ]
                            }
                          }
                        },
                        "prevalidator": {
                          "type": "object",
                          "properties": {
                            "operations_request_timeout": {
                              "$ref": "#/components/schemas/timespan.system"
                            },
                            "max_refused_operations": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "operations_batch_size": {
                              "type": "integer",
                              "minimum": -1073741824,
                              "maximum": 1073741823
                            },
                            "worker_backlog_size": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "worker_backlog_level": {
                              "type": "string",
                              "enum": [
                                "info",
                                "debug",
                                "error",
                                "fatal",
                                "warning",
                                "notice"
                              ]
                            }
                          }
                        },
                        "chain_validator": {
                          "oneOf": [
                            {
                              "title": "synchronisation_heuristic_encoding",
                              "type": "object",
                              "properties": {
                                "latency": {
                                  "description": "[latency] is the time interval (in seconds) used to determine if a peer is synchronized with a chain. For instance, a peer whose known head has a timestamp T is considered synchronized if T >= now - latency. This parameter depends on the baking rate and the latency of the network.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "synchronisation_threshold": {
                                  "description": "The minimal number of peers this peer should be synchronized with in order to be bootstrapped.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "maximum": 255
                                },
                                "worker_backlog_size": {
                                  "type": "integer",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "worker_backlog_level": {
                                  "type": "string",
                                  "enum": [
                                    "info",
                                    "debug",
                                    "error",
                                    "fatal",
                                    "warning",
                                    "notice"
                                  ]
                                }
                              }
                            },
                            {
                              "title": "legacy_bootstrap_threshold_encoding",
                              "type": "object",
                              "properties": {
                                "bootstrap_threshold": {
                                  "description": "[DEPRECATED] Set the number of peers with whom a chain synchronisation must be completed to bootstrap the node.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "maximum": 255
                                },
                                "worker_backlog_size": {
                                  "type": "integer",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "worker_backlog_level": {
                                  "type": "string",
                                  "enum": [
                                    "info",
                                    "debug",
                                    "error",
                                    "fatal",
                                    "warning",
                                    "notice"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "history_mode": {
                          "type": "string",
                          "enum": [
                            "full",
                            "archive",
                            "rolling"
                          ]
                        }
                      }
                    },
                    "network": {
                      "description": "Configuration of which network/blockchain to connect to",
                      "oneOf": [
                        {
                          "title": "sandbox",
                          "type": "string",
                          "enum": [
                            "sandbox"
                          ]
                        },
                        {
                          "title": "mainnet",
                          "type": "string",
                          "enum": [
                            "mainnet"
                          ]
                        },
                        {
                          "title": "edo2net",
                          "type": "string",
                          "enum": [
                            "edo2net"
                          ]
                        },
                        {
                          "title": "florencenet",
                          "type": "string",
                          "enum": [
                            "florencenet"
                          ]
                        },
                        {
                          "title": "granadanet",
                          "type": "string",
                          "enum": [
                            "granadanet"
                          ]
                        },
                        {
                          "title": "Custom",
                          "type": "object",
                          "properties": {
                            "genesis": {
                              "type": "object",
                              "properties": {
                                "timestamp": {
                                  "$ref": "#/components/schemas/timestamp.protocol"
                                },
                                "block": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "protocol": {
                                  "$ref": "#/components/schemas/Protocol_hash"
                                }
                              },
                              "required": [
                                "timestamp",
                                "block",
                                "protocol"
                              ]
                            },
                            "genesis_parameters": {
                              "type": "object",
                              "properties": {
                                "context_key": {
                                  "$ref": "#/components/schemas/unistring"
                                },
                                "values": {}
                              },
                              "required": [
                                "values"
                              ]
                            },
                            "chain_name": {
                              "$ref": "#/components/schemas/distributed_db_version.name"
                            },
                            "old_chain_name": {
                              "$ref": "#/components/schemas/distributed_db_version.name"
                            },
                            "incompatible_chain_name": {
                              "$ref": "#/components/schemas/distributed_db_version.name"
                            },
                            "sandboxed_chain_name": {
                              "$ref": "#/components/schemas/distributed_db_version.name"
                            },
                            "user_activated_upgrades": {
                              "$ref": "#/components/schemas/user_activated.upgrades"
                            },
                            "user_activated_protocol_overrides": {
                              "$ref": "#/components/schemas/user_activated.protocol_overrides"
                            },
                            "default_bootstrap_peers": {
                              "description": "List of hosts to use if p2p.bootstrap_peers is unspecified.",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/unistring"
                              }
                            }
                          },
                          "required": [
                            "genesis",
                            "chain_name",
                            "sandboxed_chain_name"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/config/network/user_activated_protocol_overrides": {
      "get": {
        "tags": [
          "config"
        ],
        "description": "List of protocols which replace other protocols",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_activated.protocol_overrides"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/config/network/user_activated_upgrades": {
      "get": {
        "tags": [
          "config"
        ],
        "description": "List of protocols to switch to at given levels",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_activated.upgrades"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/injection/block": {
      "post": {
        "tags": [
          "injection"
        ],
        "description": "Inject a block in the node and broadcast it. The `operations` embedded in `blockHeader` might be pre-validated using a contextual RPCs from the latest block (e.g. '/blocks/head/context/preapply'). Returns the ID of the block. By default, the RPC will wait for the block to be validated before answering. If ?async is true, the function returns immediately. Otherwise, the block will be validated before the result is returned. If ?force is true, it will be injected even on non strictly increasing fitness. An optional ?chain parameter can be used to specify whether to inject on the test chain or the main chain.",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain",
            "in": "query",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  },
                  "operations": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/operation"
                      }
                    }
                  }
                },
                "required": [
                  "data",
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/injection/operation": {
      "post": {
        "tags": [
          "injection"
        ],
        "description": "Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context. If ?async is true, the function returns immediately. Otherwise, the operation will be validated before the result is returned. An optional ?chain parameter can be used to specify whether to inject on the test chain or the main chain.",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain",
            "in": "query",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/active_chains": {
      "get": {
        "tags": [
          "monitor"
        ],
        "description": "Monitor every chain creation and destruction. Currently active chains will be given as first elements",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "title": "Main",
                        "type": "object",
                        "properties": {
                          "chain_id": {
                            "$ref": "#/components/schemas/Chain_id"
                          }
                        },
                        "required": [
                          "chain_id"
                        ]
                      },
                      {
                        "title": "Test",
                        "type": "object",
                        "properties": {
                          "chain_id": {
                            "$ref": "#/components/schemas/Chain_id"
                          },
                          "test_protocol": {
                            "$ref": "#/components/schemas/Protocol_hash"
                          },
                          "expiration_date": {
                            "$ref": "#/components/schemas/timestamp.protocol"
                          }
                        },
                        "required": [
                          "chain_id",
                          "test_protocol",
                          "expiration_date"
                        ]
                      },
                      {
                        "title": "Stopping",
                        "type": "object",
                        "properties": {
                          "stopping": {
                            "$ref": "#/components/schemas/Chain_id"
                          }
                        },
                        "required": [
                          "stopping"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/bootstrapped": {
      "get": {
        "tags": [
          "monitor"
        ],
        "description": "Wait for the node to have synchronized its chain with a few peers (configured by the node's administrator), streaming head updates that happen during the bootstrapping process, and closing the stream at the end. If the node was already bootstrapped, returns the current head immediately.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    }
                  },
                  "required": [
                    "block",
                    "timestamp"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/commit_hash": {
      "get": {
        "tags": [
          "monitor"
        ],
        "description": "DEPRECATED: use `version` instead.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unistring"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/heads/{chain_id}": {
      "get": {
        "tags": [
          "monitor"
        ],
        "description": "Monitor all blocks that are successfully validated by the node and selected as the new head of the given chain.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next_protocol",
            "in": "query",
            "description": "Protocol_hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Block header",
                  "description": "Block header. It contains both shell and protocol specific data.",
                  "type": "object",
                  "properties": {
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    },
                    "protocol_data": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    }
                  },
                  "required": [
                    "hash",
                    "level",
                    "proto",
                    "predecessor",
                    "timestamp",
                    "validation_pass",
                    "operations_hash",
                    "fitness",
                    "context",
                    "protocol_data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/protocols": {
      "get": {
        "tags": [
          "monitor"
        ],
        "description": "Monitor all economic protocols that are retrieved and successfully loaded and compiled by the node.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/valid_blocks": {
      "get": {
        "tags": [
          "monitor"
        ],
        "description": "Monitor all blocks that are successfully validated by the node, disregarding whether they were selected as the new head or not.",
        "parameters": [
          {
            "name": "protocol",
            "in": "query",
            "description": "Protocol_hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next_protocol",
            "in": "query",
            "description": "Protocol_hash (Base58Check-encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain",
            "in": "query",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Block header",
                  "description": "Block header. It contains both shell and protocol specific data.",
                  "type": "object",
                  "properties": {
                    "chain_id": {
                      "$ref": "#/components/schemas/Chain_id"
                    },
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    },
                    "protocol_data": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    }
                  },
                  "required": [
                    "chain_id",
                    "hash",
                    "level",
                    "proto",
                    "predecessor",
                    "timestamp",
                    "validation_pass",
                    "operations_hash",
                    "fitness",
                    "context",
                    "protocol_data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/version": {
      "get": {
        "tags": [
          "network"
        ],
        "description": "DEPRECATED: use `version` instead.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network_version"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/stats/gc": {
      "get": {
        "tags": [
          "stats"
        ],
        "description": "Gets stats from the OCaml Garbage Collector",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "minor_words": {
                      "type": "integer"
                    },
                    "promoted_words": {
                      "type": "integer"
                    },
                    "major_words": {
                      "type": "integer"
                    },
                    "minor_collections": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "major_collections": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "heap_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "heap_chunks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "live_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "live_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "free_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "free_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "largest_free": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "fragments": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "compactions": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "top_heap_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "stack_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    }
                  },
                  "required": [
                    "minor_words",
                    "promoted_words",
                    "major_words",
                    "minor_collections",
                    "major_collections",
                    "heap_words",
                    "heap_chunks",
                    "live_words",
                    "live_blocks",
                    "free_words",
                    "free_blocks",
                    "largest_free",
                    "fragments",
                    "compactions",
                    "top_heap_words",
                    "stack_size"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/stats/memory": {
      "get": {
        "tags": [
          "stats"
        ],
        "description": "Gets memory usage stats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Linux_proc_statm",
                      "type": "object",
                      "properties": {
                        "page_size": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "size": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "resident": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "shared": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "text": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "lib": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "data": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "dt": {
                          "$ref": "#/components/schemas/int64"
                        }
                      },
                      "required": [
                        "page_size",
                        "size",
                        "resident",
                        "shared",
                        "text",
                        "lib",
                        "data",
                        "dt"
                      ]
                    },
                    {
                      "title": "Darwin_ps",
                      "type": "object",
                      "properties": {
                        "page_size": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "mem": {
                          "type": "integer"
                        },
                        "resident": {
                          "$ref": "#/components/schemas/int64"
                        }
                      },
                      "required": [
                        "page_size",
                        "mem",
                        "resident"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "Get information on the node version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "object",
                      "properties": {
                        "major": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "minor": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "additional_info": {
                          "oneOf": [
                            {
                              "title": "Dev",
                              "type": "string",
                              "enum": [
                                "dev"
                              ]
                            },
                            {
                              "title": "RC",
                              "type": "object",
                              "properties": {
                                "rc": {
                                  "type": "integer",
                                  "minimum": -1073741824,
                                  "maximum": 1073741823
                                }
                              },
                              "required": [
                                "rc"
                              ]
                            },
                            {
                              "title": "Release",
                              "type": "string",
                              "enum": [
                                "release"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "major",
                        "minor",
                        "additional_info"
                      ]
                    },
                    "network_version": {
                      "$ref": "#/components/schemas/network_version"
                    },
                    "commit_info": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "title": "Some",
                          "type": "object",
                          "properties": {
                            "commit_hash": {
                              "$ref": "#/components/schemas/unistring"
                            },
                            "commit_date": {
                              "$ref": "#/components/schemas/unistring"
                            }
                          },
                          "required": [
                            "commit_hash",
                            "commit_date"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "version",
                    "network_version",
                    "commit_info"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/prevalidators": {
      "get": {
        "tags": [
          "workers"
        ],
        "description": "Lists the Prevalidator workers and their status.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain_id": {
                        "$ref": "#/components/schemas/Chain_id"
                      },
                      "status": {
                        "oneOf": [
                          {
                            "title": "Launching",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "launching"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Running",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "running"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Closing",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closing"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Closed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Crashed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "crashed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "errors": {
                                "$ref": "#/components/schemas/error"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "information": {
                        "type": "object",
                        "properties": {
                          "instances": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "status": {
                            "oneOf": [
                              {
                                "title": "Launching",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "launching"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Running",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "running"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closing",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closing"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Crashed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "crashed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "errors": {
                                    "$ref": "#/components/schemas/error"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "queue_length": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          }
                        },
                        "required": [
                          "instances",
                          "status",
                          "queue_length"
                        ]
                      },
                      "pipelines": {
                        "type": "integer",
                        "minimum": -32768,
                        "maximum": 32767
                      }
                    },
                    "required": [
                      "chain_id",
                      "status",
                      "information",
                      "pipelines"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BlockInfo": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string"
          },
          "chain_id": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "header": {
            "$ref": "#/components/schemas/block_header"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "operations": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "Metadata": {
        "title": "Block metadata",
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string"
          },
          "next_protocol": {
            "type": "string"
          },
          "test_chain_status": {
            "type": "object"
          },
          "max_operations_ttl": {
            "type": "integer"
          },
          "max_operation_data_length": {
            "type": "integer"
          },
          "max_block_header_length": {
            "type": "integer"
          },
          "max_operation_list_length": {
            "type": "object",
            "properties": {
              "max_size": {
                "type": "integer"
              },
              "max_op": {
                "type": "integer"
              }
            }
          },
          "baker": {
            "type": "string"
          },
          "level": {
            "type": "object",
            "properties": {
              "level": {
                "type": "integer"
              },
              "level_position": {
                "type": "integer"
              },
              "cycle": {
                "type": "integer"
              },
              "cycle_position": {
                "type": "integer"
              },
              "voting_period": {
                "type": "integer"
              },
              "voting_period_position": {
                "type": "integer"
              },
              "expected_commitment": {
                "type": "boolean"
              }
            }
          },
          "voting_period_kind": {
            "type": "string"
          },
          "nonce_hash": {
            "type": "string"
          },
          "consumed_gas": {
            "$ref": "#/components/schemas/bignum"
          },
          "deactivated": {
            "type": "string"
          },
          "balance_updates": {
            "type": "object"
          }
        }
      },
      "Chain_id": {
        "title": "Network identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Context_hash": {
        "title": "A hash of context (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Crypto_box.Public_key_hash": {
        "title": "A Cryptobox public key ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_hash": {
        "title": "A Tezos operation ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_list_list_hash": {
        "title": "A list of list of operations (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Protocol_hash": {
        "title": "A Tezos protocol ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "bignum": {
        "title": "Big number",
        "description": "Decimal representation of a big number",
        "type": "string"
      },
      "block_hash": {
        "title": "A block identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "block_header": {
        "title": "Block header",
        "description": "Block header. It contains both shell and protocol specific data.",
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "protocol_data": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "protocol_data"
        ]
      },
      "chain_status": {
        "description": "If 'unsynced', the node is not currently synchronized with of its peers (it is probably still bootstrapping and its head is lagging behind the chain's).\nIf 'synced', the node considers itself synchronized with its peers and the current head timestamp is recent.\nIf 'stuck', the node considers itself synchronized with its peers but the chain seems to be halted from its viewpoint.",
        "type": "string",
        "enum": [
          "stuck",
          "synced",
          "unsynced"
        ]
      },
      "distributed_db_version": {
        "description": "A version number for the distributed DB protocol",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "distributed_db_version.name": {
        "description": "A name for the distributed DB protocol",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "error": {
        "description": "The full list of error is available with the global RPC `GET errors`"
      },
      "fitness": {
        "title": "Block fitness",
        "description": "The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.",
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9]+$"
        }
      },
      "int64": {
        "title": "64 bit integers",
        "description": "Decimal representation of 64 bit integers",
        "type": "string"
      },
      "mempool": {
        "description": "A batch of operation. This format is used to gossip operations between peers.",
        "type": "object",
        "properties": {
          "known_valid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation_hash"
            }
          },
          "pending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation_hash"
            }
          }
        },
        "required": [
          "known_valid",
          "pending"
        ]
      },
      "network_version": {
        "description": "A version number for the network protocol (includes distributed DB version and p2p version)",
        "type": "object",
        "properties": {
          "chain_name": {
            "$ref": "#/components/schemas/distributed_db_version.name"
          },
          "distributed_db_version": {
            "$ref": "#/components/schemas/distributed_db_version"
          },
          "p2p_version": {
            "$ref": "#/components/schemas/p2p_version"
          }
        },
        "required": [
          "chain_name",
          "distributed_db_version",
          "p2p_version"
        ]
      },
      "operation": {
        "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "data": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          }
        },
        "required": [
          "branch",
          "data"
        ]
      },
      "p2p_address": {
        "description": "An address for locating peers.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "p2p_connection.id": {
        "description": "The identifier for a p2p connection. It includes an address and a port number.",
        "type": "object",
        "properties": {
          "addr": {
            "$ref": "#/components/schemas/p2p_address"
          },
          "port": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          }
        },
        "required": [
          "addr"
        ]
      },
      "p2p_connection.pool_event": {
        "description": "An event that may happen during maintenance of and other operations on the p2p connection pool. Typically, it includes connection errors, peer swaps, etc.",
        "oneOf": [
          {
            "title": "Too_few_connections",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "too_few_connections"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "Too_many_connections",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "too_many_connections"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "New_point",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "new_point"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "New_peer",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "new_peer"
                ]
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "peer_id"
            ]
          },
          {
            "title": "Incoming_connection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "incoming_connection"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Outgoing_connection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "outgoing_connection"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Authentication_failed",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "authentication_failed"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Accepting_request",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "accepting_request"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              },
              "id_point": {
                "$ref": "#/components/schemas/p2p_connection.id"
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "point",
              "id_point",
              "peer_id"
            ]
          },
          {
            "title": "Rejecting_request",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "rejecting_request"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              },
              "id_point": {
                "$ref": "#/components/schemas/p2p_connection.id"
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "point",
              "id_point",
              "peer_id"
            ]
          },
          {
            "title": "Request_rejected",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "request_rejected"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              },
              "identity": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/p2p_connection.id"
                    },
                    {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  ]
                }
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Connection_established",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "connection_established"
                ]
              },
              "id_point": {
                "$ref": "#/components/schemas/p2p_connection.id"
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "id_point",
              "peer_id"
            ]
          },
          {
            "title": "Disconnection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "disconnection"
                ]
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "peer_id"
            ]
          },
          {
            "title": "External_disconnection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "external_disconnection"
                ]
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "peer_id"
            ]
          },
          {
            "title": "Gc_points",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "gc_points"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "Gc_peer_ids",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "gc_peer_ids"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "Swap_request_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_request_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_ack_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_ack_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_request_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_request_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_ack_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_ack_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_request_ignored",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_request_ignored"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_success",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_success"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_failure",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_failure"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Bootstrap_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "bootstrap_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Bootstrap_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "bootstrap_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Advertise_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "advertise_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Advertise_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "advertise_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          }
        ]
      },
      "p2p_peer.pool_event": {
        "description": "An event that may happen during maintenance of and other operations on the connection to a specific peer.",
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "rejecting_request",
              "incoming_request",
              "disconnection",
              "external_disconnection",
              "connection_established",
              "request_rejected"
            ]
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "addr": {
            "$ref": "#/components/schemas/p2p_address"
          },
          "port": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          }
        },
        "required": [
          "kind",
          "timestamp",
          "addr"
        ]
      },
      "p2p_peer.state": {
        "description": "The state a peer connection can be in: accepted (when the connection is being established), running (when the connection is already established), disconnected (otherwise).",
        "type": "string",
        "enum": [
          "running",
          "accepted",
          "disconnected"
        ]
      },
      "p2p_point.id": {
        "description": "Identifier for a peer point",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "p2p_point.info": {
        "description": "Information about a peer point. Includes flags, state, and records about past events.",
        "type": "object",
        "properties": {
          "trusted": {
            "type": "boolean"
          },
          "greylisted_until": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "state": {
            "$ref": "#/components/schemas/p2p_point.state"
          },
          "p2p_peer_id": {
            "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
          },
          "last_failed_connection": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "last_rejected_connection": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_established_connection": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_disconnection": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_seen": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_miss": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "expected_peer_id": {
            "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
          }
        },
        "required": [
          "trusted",
          "state"
        ]
      },
      "p2p_point.pool_event": {
        "description": "Events happening during maintenance of and operations on a peer point pool (such as connections, disconnections, connection requests).",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/timestamp.system"
            },
            {
              "oneOf": [
                {
                  "title": "Outgoing_request",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "outgoing_request"
                      ]
                    }
                  },
                  "required": [
                    "event_kind"
                  ]
                },
                {
                  "title": "Accepting_request",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "accepting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "Rejecting_request",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "Rejecting_rejected",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "request_rejected"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind"
                  ]
                },
                {
                  "title": "Connection_established",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "Disconnection",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "External_disconnection",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                }
              ]
            }
          ]
        }
      },
      "p2p_point.state": {
        "description": "The state a connection to a peer point can be in: requested (connection open from here), accepted (handshake), running (connection already established), disconnected (no connection).",
        "oneOf": [
          {
            "title": "Requested",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "requested"
                ]
              }
            },
            "required": [
              "event_kind"
            ]
          },
          {
            "title": "Accepted",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "accepted"
                ]
              },
              "p2p_peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event_kind",
              "p2p_peer_id"
            ]
          },
          {
            "title": "Running",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "running"
                ]
              },
              "p2p_peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event_kind",
              "p2p_peer_id"
            ]
          },
          {
            "title": "Disconnected",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "disconnected"
                ]
              }
            },
            "required": [
              "event_kind"
            ]
          }
        ]
      },
      "p2p_stat": {
        "description": "Statistics about the p2p network.",
        "type": "object",
        "properties": {
          "total_sent": {
            "$ref": "#/components/schemas/int64"
          },
          "total_recv": {
            "$ref": "#/components/schemas/int64"
          },
          "current_inflow": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "current_outflow": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          }
        },
        "required": [
          "total_sent",
          "total_recv",
          "current_inflow",
          "current_outflow"
        ]
      },
      "p2p_version": {
        "description": "A version number for the p2p layer.",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "protocol": {
        "description": "The environment a protocol relies on and the components a protocol is made of.",
        "type": "object",
        "properties": {
          "expected_env_version": {
            "$ref": "#/components/schemas/protocol.environment_version"
          },
          "components": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "$ref": "#/components/schemas/unistring"
                },
                "interface": {
                  "$ref": "#/components/schemas/unistring"
                },
                "implementation": {
                  "$ref": "#/components/schemas/unistring"
                }
              },
              "required": [
                "name",
                "implementation"
              ]
            }
          }
        },
        "required": [
          "expected_env_version",
          "components"
        ]
      },
      "protocol.environment_version": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "timespan.system": {
        "description": "A span of time, as seen by the local computer.",
        "type": "integer"
      },
      "timestamp.protocol": {
        "description": "A timestamp as seen by the protocol: second-level precision, epoch based.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "timestamp.rfc": {
        "title": "RFC 3339 formatted timestamp",
        "description": "A date in RFC 3339 notation.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "timestamp.system": {
        "description": "A timestamp as seen by the underlying, local computer: subsecond-level precision, epoch or rfc3339 based.",
        "oneOf": [
          {
            "title": "RFC encoding",
            "oneOf": [
              {
                "$ref": "#/components/schemas/timestamp.rfc"
              }
            ]
          },
          {
            "title": "Second since epoch",
            "oneOf": [
              {
                "$ref": "#/components/schemas/int64"
              }
            ]
          }
        ]
      },
      "unistring": {
        "title": "Universal string representation",
        "description": "Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "invalid_utf8_string": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            },
            "required": [
              "invalid_utf8_string"
            ]
          }
        ]
      },
      "user_activated.protocol_overrides": {
        "title": "User activated protocol overrides",
        "description": "User activated protocol overrides: activate a protocol instead of another.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "replaced_protocol": {
              "$ref": "#/components/schemas/Protocol_hash"
            },
            "replacement_protocol": {
              "$ref": "#/components/schemas/Protocol_hash"
            }
          },
          "required": [
            "replaced_protocol",
            "replacement_protocol"
          ]
        }
      },
      "user_activated.upgrades": {
        "title": "User activated upgrades",
        "description": "User activated upgrades: at given level, switch to given protocol.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "level": {
              "type": "integer",
              "minimum": -2147483648,
              "maximum": 2147483647
            },
            "replacement_protocol": {
              "$ref": "#/components/schemas/Protocol_hash"
            }
          },
          "required": [
            "level",
            "replacement_protocol"
          ]
        }
      }
    }
  }
}